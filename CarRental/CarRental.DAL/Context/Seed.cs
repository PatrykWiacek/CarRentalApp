using AutoMapper;
using CarRental.Common.Enums;
using CarRental.DAL.Entities;
using CarRental.DAL.HelperMappings;
using CarRental.DAL.HelperModels;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Data;
using System.Globalization;

namespace CarRental.DAL.Context;

public static class Seed
{
    public static List<CustomerJson> Customers { get; set; } = GetItems<CustomerJson>("customers.json");
    public static List<RentalJson> Rentals { get; set; } = GetItems<RentalJson>("rentals.json");
    public static List<CarJson> Cars { get; set; } = GetCarsWithJsonEmbeddedValues("cars.json");

    public static void Initialize(ApplicationContext context, UserManager<Customer> userManager, RoleManager<IdentityRole<int>> roleManager)
    {
        context.Database.EnsureCreated();

        Customer[] customers = MapperFromJson.MapToCustomers(Customers).ToArray();
        Rental[] rentals = MapperFromJson.MapToRentals(Rentals).ToArray();
        Car[] cars = MapperFromJson.MapToCars(Cars).ToArray();



        //if (context.Customers.Any() && context.Rentals.Any() && context.Cars.Any())
        if (context.Rentals.Any() && context.Cars.Any())
        {
            return; // DB has been seeded
        }

        foreach (var customer in customers)
        {
            userManager.CreateAsync(customer).Wait();
            //context.Customers.Add(new()
            //{
            //    FirstName = customer.FirstName,
            //    LastName = customer.LastName,
            //    PhoneNumber = customer.PhoneNumber,
            //    EmailAddress = customer.EmailAddress,
            //    Gender = customer.Gender,
            //    Pesel = customer.Pesel,
            //});
        }
        //context.SaveChanges();

        foreach (var car in cars)
        {
            car.Id = 0; // to allow Id to be generated by DB
            car.LicencePlateNumber = new string(car.LicencePlateNumber.ToCharArray().Where(c => !char.IsWhiteSpace(c)).ToArray());
            context.Cars.Add(car);
        }
        context.SaveChanges();

        foreach (var rental in rentals)
        {
            context.Rentals.Add(new Rental
            {
                CarId = rental.CarId,
                CustomerId = rental.CustomerId,
                BeginDate = rental.BeginDate,
                EndDate = rental.EndDate,
                TotalCost = rental.TotalCost,
            });
        }
        context.SaveChanges();
    }
    public static List<T> GetItems<T>(string fileName)
    {
        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data", fileName);
        string itemsSerialized;

        try
        {
            itemsSerialized = File.ReadAllText(filePath);
        }
        catch (Exception)
        {
            throw new Exception("Error with serializing to string!");
        }

        var result = JsonConvert.DeserializeObject<List<T>>(itemsSerialized);
        return result ?? new List<T>();
    }

    public static List<CarJson> GetCarsWithJsonEmbeddedValues(string fileName)
    {
        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data", fileName);
        string itemsSerialized;
        string itemsSerializedWithCarsTag;
        try
        {
            itemsSerialized = File.ReadAllText(filePath);
        }
        catch (Exception)
        {
            throw new Exception("Error with serializing to string!");
        }

        var prepopulatedCars = JsonConvert.DeserializeObject<List<CarJson>>(itemsSerialized);

        #region Complete Car with embedded values from JSON file

        itemsSerializedWithCarsTag = "{\"cars\": " + itemsSerialized + "\n}";
        JObject jsonObject = JObject.Parse(itemsSerializedWithCarsTag);
        IList<JToken> jsonCars = jsonObject["cars"]!.Children().ToList();

        var selectedValues = jsonCars.Select(car => new
        {
            Displacement = car["engine_parameters"]!["displacement"]!.ToString(),
            PowerInKiloWatts = car["engine_parameters"]!["power_kw"]!.ToString(),
            FuelType = car["engine_parameters"]!["fuel_type"]!.ToString(),

            FuelConsumptionHighway = float.Parse(car["fuel_consumption_highway"]!.ToString()).ToString(CultureInfo.InvariantCulture),
            FuelConsumptionCity = float.Parse(car["fuel_consumption_city"]!.ToString()).ToString(CultureInfo.InvariantCulture),
        }).ToList();

        Dictionary<int, EngineType> jsonFuelTypeToCarEngineTypeTranslator = new()
        {
            [1] = EngineType.Gasoline,
            [2] = EngineType.Electric,
        };

        var zipped = prepopulatedCars!.Zip(selectedValues);
        foreach (var car in zipped)
        {
            car.First.Displacement = car.Second.Displacement;
            car.First.PowerInKiloWatts = float.Parse(car.Second.PowerInKiloWatts);
            car.First.EngineType = jsonFuelTypeToCarEngineTypeTranslator[int.Parse(car.Second.FuelType)];
            car.First.FuelConsumption = car.Second.FuelConsumptionHighway + "/" + car.Second.FuelConsumptionCity;
        }
        #endregion

        var result = zipped.Select(z => z.First).ToList();

        return result ?? new List<CarJson>();
    }
}

public static class Helper
{
    private static IMapper Mapper;
    public static void MappingHelper()
    {
        var config = new MapperConfiguration(cfg =>
        {
            cfg.CreateMap<CarJson, Car>();
        });
        Mapper = config.CreateMapper();
    }
    public static DestinationClass Map(SourceClass source)
    {
        return Mapper.Map<SourceClass, DestinationClass>(source);
    }
}
public class SourceClass
{
    public string Name { get; set; }
}
public class DestinationClass
{
    public string Name { get; set; }
}
