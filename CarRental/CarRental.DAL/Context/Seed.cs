using CarRental.DAL.Entities;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Data;
using System.Text.Json.Nodes;

namespace CarRental.DAL.Context;

public static class Seed
{
    public static List<Customer> Customers { get; set; } = GetItems<Customer>("customers.json");
    public static List<Rental> Rentals { get; set; } = GetItems<Rental>("rentals.json");
    public static List<Car> Cars { get; set; } = GetItems<Car>("cars.json");

    public static void Initialize(ApplicationContext context)
    {
        context.Database.EnsureCreated();

        Customer[] customers = Customers.ToArray();
        Rental[] rentals = Rentals.ToArray();
        Car[] cars = Cars.ToArray();

        GetItemsWithEmbedded<PoorCar>("cars2.json"); // TODO: remove after check

        if (context.Customers.Any() && context.Rentals.Any() && context.Cars.Any())
        {
            return; // DB has been seeded
        }

        foreach (var customer in customers)
        {
            context.Customers.Add(new()
            {
                FirstName = customer.FirstName,
                LastName = customer.LastName,
                PhoneNumber = customer.PhoneNumber,
                EmailAddress = customer.EmailAddress,
                Gender = customer.Gender,
                Pesel = customer.Pesel,
            });
        }
        context.SaveChanges();

        foreach (var car in cars)
        {
            car.Id = 0; // to allow Id to be generated by DB
            car.LicencePlateNumber = new string(car.LicencePlateNumber.ToCharArray().Where(c => !char.IsWhiteSpace(c)).ToArray());
            context.Cars.Add(car);
        }
        context.SaveChanges();

        foreach (var rental in rentals)
        {
            context.Rentals.Add(new Rental
            {
                CarId = rental.CarId,
                CustomerId = rental.CustomerId,
                BeginDate = rental.BeginDate,
                EndDate = rental.EndDate,
                TotalCost = rental.TotalCost,
            });
        }
        context.SaveChanges();
    }
    public static List<T> GetItems<T>(string fileName)
    {
        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data", fileName);
        string itemsSerialized;

        try
        {
            itemsSerialized = File.ReadAllText(filePath);
        }
        catch (Exception)
        {
            throw new Exception("Error with serializing to string!");
        }

        var result = JsonConvert.DeserializeObject<List<T>>(itemsSerialized);
        return result ?? new List<T>();
    }

    public static List<Car> GetItemsWithEmbedded(string fileName)
    {
        var filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Data", fileName);
        string itemsSerialized;

        try
        {
            itemsSerialized = File.ReadAllText(filePath);
        }
        catch (Exception)
        {
            throw new Exception("Error with serializing to string!");
        }

        JObject jsonObject = JObject.Parse(itemsSerialized);

        var prepopulatedCars = JsonConvert.DeserializeObject<List<Car>>(itemsSerialized);
        
        IList<JToken> jsonCars = jsonObject["cars"].Children().ToList();

        var selectedValues = jsonCars.Select(car => new
        {
            Displacement = car["engine_parameters"]["displacement"].ToString(),
            FuelConsumption = car["engine_parameters"]["fuel_consumption"].ToString(),
            PowerInKiloWatts = car["engine_parameters"]["power_kw"].ToString(),
            FuelType = car["engine_parameters"]["fuel_type"].ToString()
        }).ToList();

        var zipped = prepopulatedCars.Zip(selectedValues);

        foreach (var car in zipped)
        {
            car.First.Displacement = car.Second.Displacement;
            car.First.FuelConsumption = car.Second.FuelConsumption;
            car.First.PowerInKiloWatts = float.Parse(car.Second.PowerInKiloWatts);
        }

            //(first, second) =>
            //{
            //    first.Displacement = second.Displacement;
            //});

        return result ?? new List<Car>();

    }
}
